#!/usr/bin/env nextflow
/*
vim: syntax=groovy
-*- mode: groovy;-*-
========================================================================================
              G I P :  G E N O M E   I N S T A B I L I T Y   P I P E L I N E
========================================================================================
 Detect, quantify, compare and visualize genomic variants.
 #### Homepage / Documentation
 https://github.com/giovannibussotti/GIP
 #### Authors
 Giovanni Bussotti <giovanni.bussotti@pasteur.fr>
----------------------------------------------------------------------------------------
*/

version = "1.0.9"
def helpMessage() {
    log.info"""
    =========================================
     GIP : Genome Instability Pipeline v${version}
    =========================================
    
    Usage:
    The typical command for running the pipeline is as follows:
    gip --genome genome.fa --annotation annotations.gtf --index index.tsv -c gip.config
    
    Mandatory arguments:
      --genome                        multi-FASTA genome reference file
      --annotation                    gene coordinates file (GTF format) 
      --index                         list of sequencing data files
      -c                              nextflow configuration file
    General Options:
      --resultDir                     result directory 
      --chrs                          List of chromosome identifiers to consider (included in quotes)
      --geneFunction                  gene function annotation file
      --MAPQ                          read MAPQ cut-off  
      --delDup                        delete duplicate reads [true|false]
      --CGcorrect                     CG-content correction [true|false]
      --customCoverageLimits          Two numbers: N1, N2. Significant CNV genes or bins must also have a coverage > N1 or < N2
      --repeatLibrary                 RepeatMasker library (FASTA file)
    Karyotype Options:
      --chrPlotYlim                   karyptype boxplot y-axis limits
    Bin Coverage Options:  
      --binSize                       bin size
      --binPlotYlim                   bin coverage y-axis limits 
      --covPerBinSigOPT               identify statistically significant CNV wrt the reference  
    Gene Coverage Options:      
      --covPerGeRepeatRange           Visualize repeats within this distance from significant genes
      --covPerGeSigOPT                identify statistically significant gene CNV wrt the reference
    SNV Options:  
      --freebayesOPT                  Freebayes options
      --filterFreebayesOPT            Downstream SNV quality filters
    SV Options: 
      --filterDellyOPT                Downastream, Delly filtering options
      --binSizeCircos                 bin size for circos plot
    BigWig Options:  
      -bigWigOPT                      Options to generate the coverage bigWig file
    """.stripIndent()
}

/*
 * SET UP CONFIGURATION VARIABLES
 */


// Show help message
params.help = false
if (params.help){
    helpMessage()
    exit 0
}

// check mandatory options
//if (!params.genomeIndex && !params.genome) {
//    exit 1, "Reference genome not specified"
//}

// Configurable variables
params.resultDir     = "gipOut"
params.genome        = "genome.fa"
params.annotation    = "annotations.gtf"
params.repeatLibrary = "default"
params.index         = 'index.tsv'
params.geneFunction  = 'NA'
genome               = file(params.genome)
inputAnnotation      = file(params.annotation)
geneFunction         = file(params.geneFunction)
repeatLibrary        = file(params.repeatLibrary)

//ch = Channel.from(params.sampleList)
//ch.into { ch1 }

Channel
    .fromPath(params.index)
    .splitCsv(header:true , sep:'\t')
    .map{ row-> tuple(row.sampleId, row.read1, row.read2) }
    .set { ch1  }

//config file variables
resultDir = file(params.resultDir + "/samples")
resultDir.with{mkdirs()}
MAPQ      = params.MAPQ
delDup    = params.delDup
CGcorrect = params.CGcorrect
chrs      = params.chrs
chrPlotYlim  = params.chrPlotYlim
binPlotYlim  = params.binPlotYlim
binOverviewSize = params.binOverviewSize
binSize      = params.binSize
customCoverageLimits = params.customCoverageLimits
covPerBinSigOPT = params.covPerBinSigOPT
covPerGeRepeatRange  = params.covPerGeRepeatRange
covPerGeSigOPT  = params.covPerGeSigOPT
freebayesOPT         = params.freebayesOPT
filterFreebayesOPT   = params.filterFreebayesOPT
filterDellyOPT   = params.filterDellyOPT
binSizeCircos    = params.binSizeCircos
bigWigOPT        = params.bigWigOPT


process processGeneFunction {
  publishDir "$params.resultDir/genome"
  output:
  file 'geneFunction.tsv' into (geFun_ch , geFun_ch1 , geFun_ch2)

  script:
  if( params.geneFunction == 'NA'  )
  """
  cat $inputAnnotation | perl -ne 'if(\$_=~/gene_id \"([^\"]+)\"/){print "\$1\tNA\n";}' > geneFunction.tsv
  """

  else 
  """
  cp $geneFunction geneFunction.tsv
  """
}

process prepareGenome {
  publishDir "$params.resultDir/genome"

  input:
  file(inputAnnotation)
  file(genome)

  output:
  file ("db") into bwaDb_ch1
  file("genome.chrSize") into chrSize_ch1
  set file("genome.fa") , file("genome.fa.fai") , file("genome.dict") , file("genome.chrSize") into (genome_ch1 , genome_ch2 , genome_ch4 , genome_ch5 , genome_ch6 , genome_ch7 , genome_ch8, genome_ch9, genome_ch10)
  file("genome.chrSize") into size_ch1
  file("genome.gaps.gz")
  file("repeats") into (repeats_ch1 , repeats_ch2 , repeats_ch4)
  file("snpEff")  into snpEffDb_ch1
  file("annotation.ge.gtf") into (geGtf_ch1 , geGtf_ch3)
  env chroms into chromosomes

  script:
  if( params.repeatLibrary == 'default' )
  """
  A-prepareGenome.sh -f $genome -x $inputAnnotation -c $task.cpus -l default
  if [ $chrs == 'all' ]; then
    chroms=`cut -f1 genome.chrSize | tr "\\n" " " | sed -e 's/ \$//'`
  else 
    chroms=$chrs
  fi
  """

  else
  """
  A-prepareGenome.sh -f $genome -x $inputAnnotation -c $task.cpus -l $repeatLibrary
  if [ $chrs == 'all' ]; then
    chroms=`cut -f1 genome.chrSize | tr "\\n" " " | sed -e 's/ \$//'`
  else 
    chroms=$chrs
  fi
  """


}


process map { 
  publishDir "$params.resultDir/samples/$sampleId"
  tag { "${sampleId}" }
 
  input:
  tuple val(sampleId) , val(read1) , val(read2) from ch1
  set file(fa) , file(fai) , file(dict) , file(size) from genome_ch1  
  file(db) from bwaDb_ch1

  output:
  set val(sampleId) , file ("${sampleId}.bam") , file ("${sampleId}.bam.bai") into (map1 , map2 , map3)
  set val(sampleId) , file ("${sampleId}.MarkDup.table") , file ("${sampleId}.MarkDup.histData") , file ("${sampleId}.MarkDup.hist.png") into (mapDump1)
      
  """ 
  mapSample.sh $sampleId $task.cpus $fa $db/bwa/genome/ $read1 $read2 . $delDup   
  reformatMarkDup.sh $sampleId
  """
}

process mappingStats {
  publishDir "$params.resultDir/samples/$sampleId"
  tag { "${sampleId}" }

  input:
  set val(sampleId), file(bam) , file(bai) from map2
  set file(fa) , file(fai) , file(dict) , file(size) from genome_ch5

  output:
  set val(sampleId), file ("${sampleId}.alignmentMetrics.table") , file ("${sampleId}.insertSize.histData") , file ("${sampleId}.insertSize.hist.png") , file ("${sampleId}.insertSize.table") into (mappingStats)

  """ 
  mkdir \$PWD/tmpDir
  #mapping stats
  java -jar /bin/picard.jar CollectAlignmentSummaryMetrics R=$fa I=$bam O=${sampleId}.alignmentMetrics TMP_DIR=\$PWD/tmpDir
  #insert size
  java -jar /bin/picard.jar CollectInsertSizeMetrics I=$bam O=${sampleId}.insertSize.metrics H=${sampleId}.insertSize.pdf REFERENCE_SEQUENCE=$fa TMP_DIR=\$PWD/tmpDir MINIMUM_PCT=0
  rm -rf \$PWD/tmpDir ${sampleId}.insertSize.pdf
  reformatMapStats.sh ${sampleId}
  """
}

process covPerChr {
  publishDir "$params.resultDir/samples/$sampleId"
  tag { "${sampleId}" }

  input:
  set val(sampleId), file(bam) , file(bai) from map1
  set file(fa) , file(fai) , file(dict) , file(size) from genome_ch2
  val(chromosomes) from chromosomes

  output:
  set val(sampleId), file(bam) , file(bai), file("chrCoverageMedians_$sampleId") into ( covPerChr1 , covPerChr2 , covPerChr3, covPerChr4 )

  """
  chrMedianCoverages $sampleId $size $MAPQ \"$chromosomes\" .
  """
}

process covPerBin {
  publishDir "$params.resultDir/samples/$sampleId"
  tag { "${sampleId}" }

  input:
  set val(sampleId), file(bam) , file(bai) , file(covPerChr) from covPerChr2
  set file(fa) , file(fai) , file(dict) , file(size) from genome_ch4  
  val(chromosomes) from chromosomes

  output:
  set val(sampleId), file ("${sampleId}.covPerBin.gz"), file ("${sampleId}.covPerBin.plot.all.png") , file ("${sampleId}.covPerBin.plot.byChr.pdf") , file ("${sampleId}.covPerBin.plot.tsv.gz") , file ("${sampleId}.covPerBin.plot.faceting.png") , file("${sampleId}.covPerBin.significant.bins.tsv.gz") , file("${sampleId}.covPerBin.significant.segments.tsv.gz") , file("${sampleId}.covPerBin.significant.stats") into (covPerBin)
  set val(sampleId), file(bam) , file(bai) , file(covPerChr) , file ("${sampleId}.covPerBin.gz") , file ("${sampleId}.bed") into (covPerBin4covPerGe) 
  set val(sampleId), file(bam) , file(bai) , file(covPerChr) , file ("${sampleId}.bed") , file ("${sampleId}.karyotype.medianCoverage")  into (covPerBin4delly)
  set val(sampleId), file ("${sampleId}.karyotype.boxplot.png") , file ("${sampleId}.karyotype.ridges.png") , file ("${sampleId}.karyotype.allMedians.tsv") , file ("${sampleId}.karyotype.medianCoverage") into (karyotype)


  """  
  covPerBin $bam $binSize $size $covPerChr _tmp
 
  #CG-content correction
  if [ $CGcorrect == "true" ]; then
    gunzip -c ${sampleId}.covPerBin.gz | tail -n +2 | cut -f 1,2,3 > bin.bed
    bedtools nuc -fi $fa -bed bin.bed > bin.nuc
    Rscript /bin/covPerBin2loessGCnormalization_v2.R --ASSEMBLY $fa --DIR . --SAMPLE ${sampleId} --outName ${sampleId} --nuc bin.nuc --sampling 20000 
    mv ${sampleId}.gcLnorm.covPerBin.gz ${sampleId}.covPerBin.gz
    rm -rf bin.bed bin.nuc
  fi

  Rscript /bin/sigPeaks_CLT.R --input ${sampleId}.covPerBin.gz --outName ${sampleId}.covPerBin.significant --minMAPQ $MAPQ --coverageThresholds $customCoverageLimits  $covPerBinSigOPT

  Rscript /bin/plotCovPerBin.R --covPerBin ${sampleId}.covPerBin.gz --outName ${sampleId}.covPerBin.plot --chrs $chromosomes --significant ${sampleId}.covPerBin.significant.bins.tsv.gz --chrSizeFile genome.chrSize --minMAPQ $MAPQ --ylim $binPlotYlim --coverageColorLimits $customCoverageLimits --binOverviewSize $binOverviewSize

  mkdir -p _tmp
  TMPDIR=./_tmp
  Rscript /bin/plotGenomeCoverage_V3.R --files ${sampleId}.covPerBin.gz --NAMES ${sampleId} --DIR . --outName ${sampleId}.karyotype --MAPQ $MAPQ --FORMAT covPerBin --chr $chromosomes --ylim $chrPlotYlim
  """
}

process covPerGe {
  publishDir "$params.resultDir/samples/$sampleId"
  tag { "${sampleId}" }

  input:
  set val(sampleId), file(bam) , file(bai) , file(covPerChr) , file(covPerBin) , file(bed) from covPerBin4covPerGe
  set file(fa) , file(fai) , file(dict) , file(size) from genome_ch6
  file repeats from repeats_ch1
  file (annotation) from geGtf_ch1
  file geFun from geFun_ch1
  val(chromosomes) from chromosomes

  output:
  set val(sampleId), file(bam) , file(bai) , file(covPerChr) , file("${sampleId}.covPerGe.gz") into covPerGe1 
  set val(sampleId) , file("${sampleId}.covPerGe.significant.tsv") , file("${sampleId}.covPerGe.significant.stats") , file("${sampleId}.covPerGeKaryoplot") into (covPerGeDump1)
  //, file("${sampleId}.gcLnorm.covPerGe.pdf") ,  file("${sampleId}.covPerGe.significant.pdf") , file("${sampleId}.covPerGe.stats.pdf")

  """ 
  covPerGe $bam $annotation $covPerChr $bed _tmp ${sampleId}.covPerGe

  #CG-content correction
  if [ $CGcorrect == "true" ]; then
    gunzip -c ${sampleId}.covPerGe.gz | tail -n +2 | cut -f 2 | perl -ne 'if(\$_=~/^(.+):(\\d+)-(\\d+)\$/){print \"\$1\\t\$2\\t\$3\\n\"}' > ge.bed
    bedtools nuc -fi $fa -bed ge.bed > ge.nuc  
    Rscript /bin/covPerGe2loessGCnormalization_v2.R --ASSEMBLY $fa --DIR . --SAMPLE ${sampleId} --outName ${sampleId} --sampling 20000 --nuc ge.nuc
    mv ${sampleId}.gcLnorm.covPerGe.gz ${sampleId}.covPerGe.gz
    rm -rf ge.bed ge.nuc
  fi

  Rscript /bin/sigPeaks_mixture.R --input ${sampleId}.covPerGe.gz --outName ${sampleId}.covPerGe.significant --minMAPQ $MAPQ --coverageThresholds $customCoverageLimits $covPerGeSigOPT

  Rscript /bin/karyoplotCovPerGe.R --covPerGe ${sampleId}.covPerGe.gz --covPerBin $covPerBin --chrSize $size --CHRS $chromosomes --REPS $repeats/genome.out.gff --significant ${sampleId}.covPerGe.significant.tsv --outDir ${sampleId}.covPerGeKaryoplot --repeatRange $covPerGeRepeatRange --minMAPQ $MAPQ --geneFunction $geFun
  """
}

process freebayes {
  publishDir "$params.resultDir/samples/$sampleId"
  tag { "${sampleId}" }
 
  input:
  set val(sampleId), file(bam) , file(bai) , file(covPerChr) from covPerChr3
  set file(fa) , file(fai) , file(dict) , file(size) from genome_ch7
  file repeats from repeats_ch2
  val(chromosomes) from chromosomes

  output:
  set val(sampleId) , file("${sampleId}.vcf.gz") , file("${sampleId}.vcf.gz.tbi") , file("${sampleId}_freebayesFiltered") into (freebayes1)

  """ 
  freebayes -f $fa --min-mapping-quality $MAPQ $freebayesOPT --vcf ${sampleId}.vcf $bam 
  bgzip ${sampleId}.vcf
  tabix -p vcf -f ${sampleId}.vcf.gz
  Rscript /bin/vcf2variantsFrequency_V4.R --selectedChrs $chromosomes --vcfFile ${sampleId}.vcf.gz --chrCoverageMediansFile $covPerChr --chrSizeFile $size --outdir ./${sampleId}_freebayesFiltered --reference $fa --discardGtfRegions $repeats/genome.out.gff $filterFreebayesOPT
  """
}

process snpEff {
  publishDir "$params.resultDir/samples/$sampleId"
  tag { "${sampleId}" }

  input:
  set val(sampleId), file(vcf) , file(tbi) , file(freebayesFilteredDir) from freebayes1
  file(snpEff) from snpEffDb_ch1
  file geFun from geFun_ch2 
 
  output:
    set val(sampleId) , file("${sampleId}.vcf.gz") , file("${sampleId}.vcf.gz.tbi") , file("${sampleId}_freebayesFiltered") , file("snpEff_summary_${sampleId}.genes.txt.gz") , file("snpEff_summary_${sampleId}.html") into (snpEff)

  """ 
  #run snpEff on Freebayes output
  gunzip -c $vcf > tmpSnpEff_${sampleId}.vcf
  java -jar /opt/snpEff/snpEff.jar -ud 0 genome tmpSnpEff_${sampleId}.vcf -noLog -c $snpEff/snpEff.config -stats snpEff_summary_${sampleId} > ${sampleId}.snpEff.vcf
  bgzip ${sampleId}.snpEff.vcf
  gzip -f snpEff_summary_${sampleId}.genes.txt
  mv snpEff_summary_${sampleId} snpEff_summary_${sampleId}.html
  mv ${sampleId}.snpEff.vcf.gz ${sampleId}.vcf.gz
  rm -rf $tbi
  tabix -p vcf -f ${sampleId}.vcf.gz

  #run snpEff on the filtered SNVs
  gunzip -c ${sampleId}_freebayesFiltered/singleVariants.vcf.gz > tmpSnpEff_${sampleId}.vcf
  java -jar /opt/snpEff/snpEff.jar -ud 0 genome tmpSnpEff_${sampleId}.vcf -noLog -c $snpEff/snpEff.config -stats snpEff_summary_${sampleId} > ${sampleId}.snpEff.vcf
  bgzip ${sampleId}.snpEff.vcf
  gzip -c snpEff_summary_${sampleId}.genes.txt > ${sampleId}_freebayesFiltered/snpEff_summary_${sampleId}.genes.txt.gz
  mv snpEff_summary_${sampleId} ${sampleId}_freebayesFiltered/snpEff_summary_${sampleId}.html
  mv ${sampleId}.snpEff.vcf.gz ${sampleId}_freebayesFiltered/singleVariants.vcf.gz
  rm -rf ${sampleId}_freebayesFiltered/singleVariants.vcf.gz.tbi
  tabix -p vcf -f ${sampleId}_freebayesFiltered/singleVariants.vcf.gz

  #extract the EFF field
  Rscript /bin/snpEffVcf2table.R --vcfFile ${sampleId}_freebayesFiltered/singleVariants.vcf.gz --out ${sampleId}_freebayesFiltered/singleVariants.df.EFF

  #update the singleVariants.df table with the EFF field
  gunzip ${sampleId}_freebayesFiltered/singleVariants.df.gz 
  gunzip ${sampleId}_freebayesFiltered/singleVariants.df.EFF
  awk '{print \$NF}' ${sampleId}_freebayesFiltered/singleVariants.df.EFF > ${sampleId}_freebayesFiltered/EFF
  sort -k1,1n -k2,2n ${sampleId}_freebayesFiltered/singleVariants.df > ${sampleId}_freebayesFiltered/singleVariants.df_numsorted
  paste ${sampleId}_freebayesFiltered/singleVariants.df_numsorted ${sampleId}_freebayesFiltered/EFF > ${sampleId}_freebayesFiltered/singleVariants.df2
  mv ${sampleId}_freebayesFiltered/singleVariants.df2 ${sampleId}_freebayesFiltered/singleVariants.df

  #compute non-normalized N/S ratio
  Rscript /bin/NSratio.R --ALLGEANN $geFun --SNPEFFDF ${sampleId}_freebayesFiltered/singleVariants.df --ID ${sampleId}
  mv ${sampleId}_cleanEFF.tsv ${sampleId}_freebayesFiltered/singleVariants.df
  gzip -f ${sampleId}_freebayesFiltered/singleVariants.df  
  mv ${sampleId}_NStables.tsv  ${sampleId}_freebayesFiltered/NStable.tsv
  gzip -f ${sampleId}_freebayesFiltered/NStable.tsv
  mv ${sampleId}_cleanEFF.stats ${sampleId}_freebayesFiltered/NS.stats  

  rm -rf tmpSnpEff_${sampleId}.vcf snpEff_summary_${sampleId}.genes.txt ${sampleId}_freebayesFiltered/singleVariants.df.EFF ${sampleId}_freebayesFiltered/EFF ${sampleId}_freebayesFiltered/singleVariants.df_numsorted
  """
}

process delly {
  publishDir "$params.resultDir/samples/$sampleId"
  tag { "${sampleId}" }

  input:
  set val(sampleId), file(bam) , file(bai) , file(covPerChr) , file(bed) , file(karyoMedianCov) from covPerBin4delly
  set file(fa) , file(fai) , file(dict) , file(size) from genome_ch8
  val(chromosomes) from chromosomes

  output:
  set val(sampleId), file("${sampleId}.delly.vcf.gz") , file("${sampleId}.delly.vcf.gz.tbi") , file("${sampleId}_dellyFiltered")  into delly

  """
  delly call -q $MAPQ -g $fa -o delly.bcf $bam
  bcftools view -i 'REF="A" | REF="C" | REF="G" | REF="T"' delly.bcf > ${sampleId}.delly.vcf
  bgzip ${sampleId}.delly.vcf 
  tabix -p vcf -f ${sampleId}.delly.vcf.gz
  Rscript /bin/filterDelly.R --vcfFile ${sampleId}.delly.vcf.gz --chrSizeFile $size --outDir . --chrsToKeep $chromosomes $filterDellyOPT 
  #circos
  cp /bin/ideogram.conf /bin/ticks.conf .
  prepare4Circos.sh -i $sampleId -m $bam -v $bed -s $size -x $covPerChr -a $karyoMedianCov -c "$chromosomes" -b $binSizeCircos -t /bin/templateCircos.conf -z BND.bed -j INV.bed -k DUP.bed -w DEL.bed -g INS.bed
  #reorganize output
  mkdir -p ${sampleId}_dellyFiltered/
  mv ${sampleId}.SV.circos.png ${sampleId}_dellyFiltered/
  bcftools sort -T ./bcfSort -o sorted.vcf output.vcf
  mv sorted.vcf output.vcf
  bgzip output.vcf 
  tabix -p vcf -f output.vcf.gz
  mv INS.bed INV.bed DEL.bed DUP.bed BND.bed output.vcf.gz output.vcf.gz.tbi ${sampleId}_dellyFiltered/
  mv ${sampleId}_circosData ${sampleId}_dellyFiltered/
  """
}

process bigWigGenomeCov {
  publishDir "$params.resultDir/samples/$sampleId"
  tag { "${sampleId}" }

  input:
  set val(sampleId), file(bam) , file(bai) from map3
  val(chromosomes) from chromosomes
  file(size) from size_ch1

  
  output:
  set val(sampleId), file("${sampleId}.bw") into (bigWigGenomeCov)

  """
  #TMPDIR used by deeptools to avoid disk quota error
  mkdir -p _tmp
  TMPDIR=./_tmp
  bamCoverage -b $bam --outFileName ${sampleId}.bg --numberOfProcessors $task.cpus --outFileFormat bedgraph $bigWigOPT
  #sort bedgraph
  LC_COLLATE=C sort -k1,1 -k2,2n -T _tmp/ ${sampleId}.bg > bg
  /bin/bedGraphToBigWig bg $size ${sampleId}.bw
  rm -rf bg ${sampleId}.bg _tmp
  """
}


process covPerClstr {
  publishDir "$params.resultDir"

  input:
  file('*') from covPerGe1.collect()  
  set file(fa) , file(fai) , file(dict) , file(size) from genome_ch9
  file (annotation) from geGtf_ch3
  file geFun from geFun_ch

  output:
  file ('*') into covPerClstrDump

  """
  #all input in the same order
  COVPERGE=''
  NAMES=''
  CHRM=''
  BAMS='' 
  for X in `ls *covPerGe.gz`; do 
   N=\${X%%.covPerGe.gz}
   NAMES="\$NAMES \$N"
   BAMS="\$BAMS \${N}.bam"
   CHRM="\$CHRM chrCoverageMedians_\$N"
   COVPERGE="\$COVPERGE \$X";
  done
  #remove leading ithe space
  NAMES="\$(echo -e "\${NAMES}" | sed -e 's/^[[:space:]]*//')"
  BAMS="\$(echo -e "\${BAMS}" | sed -e 's/^[[:space:]]*//')"
  CHRM="\$(echo -e "\${CHRM}" | sed -e 's/^[[:space:]]*//')"
  COVPERGE="\$(echo -e "\${COVPERGE}" | sed -e 's/^[[:space:]]*//')"

  #find and quantify gene clstrs
  bash /bin/covPerClstr.sh -f "\$COVPERGE" -n "\$NAMES" -b "\$BAMS" -c "\$CHRM" -m $MAPQ -g $annotation -a $fa -l 0.9 -s 0.9 -o covPerClstr
  #annotate
  for CL in `ls covPerClstr/lowMapq.clstr/`; do 
   echo \$CL >> covPerClstr/clstrAnn.tsv
   for X in `grep ">" covPerClstr/lowMapq.clstr/\$CL | cut -f2 -d">"`; do grep -m1 -P "^\$X\\t" $geFun ; done >> covPerClstr/clstrAnn.tsv
   echo >> covPerClstr/clstrAnn.tsv 
   for X in `grep ">" covPerClstr/lowMapq.clstr/\$CL | cut -f2 -d">"`; do grep -m1 -P "^\$X\\t" $geFun ; done | awk '{printf("%s\\t%s\\n", \$0, "'\$CL'") }' >> covPerClstr/clstrAnnFormat2.tsv
  done
  
  """
}

process report {
  publishDir "$params.resultDir/reports" , mode: 'copy'

  input:
  file ('*') from covPerChr4.join(karyotype).join(covPerBin).join(mappingStats).join(covPerGeDump1).join(snpEff).join(delly).join(mapDump1).join(bigWigGenomeCov)
  file repeats from repeats_ch4
  file('*') from genome_ch10
   
 
  output:
  //set val(sampleId), file("report_${sampleId}.html") into (report)
  file('*.html') into end

  script:
  """
  sampleId=`cat input.1`
  reportFileName=\${sampleId}.html
  cp /bin/buildReport.Rmd .
  R -e "sample='\$sampleId'; version='$version'; rmarkdown::render('buildReport.Rmd' , output_file = '\$reportFileName')"
  """
}


/*
process report {
  publishDir "$params.resultDir/samples/$sampleId"

  input:
  tuple val(sampleId), file ('*') from covPerChr4.join(karyotype).join(covPerBin).join(mappingStats).join(covPerGeDump1).join(snpEff).join(delly).join(mapDump1).join(bigWigGenomeCov).toList()

  output:
  set val(sampleId), file("report_${sampleId}.html") into (report)

  script:
  """
  reportFileName=${sampleId}.html
  cp /bin/buildReport.Rmd .
  R -e "sample='$sampleId'; version='$version'; rmarkdown::render('buildReport.Rmd' , output_file = '\$reportFileName')"
  """
}
*/
